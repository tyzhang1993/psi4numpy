# A simple Psi 4 input script to compute EP2 using spin-orbitals 
# From Szabo and Ostlund page 390
# Requirements scipy 0.13.0+ and numpy 1.7.2+
#
# Algorithms were taken directly from Daniel Crawford's programming website:
# http://sirius.chem.vt.edu/wiki/doku.php?id=crawdad:programming
# Special thanks to Rob Parrish for initial assistance with libmints
#
# Created by: Daniel G. A. Smith
# Date: 7/29/14
# License: GPL v3.0
#
import itertools as it
import time
import numpy as np
from scipy import linalg as SLA
np.set_printoptions(precision=5, linewidth=200, suppress=True)

# Memory for Psi4 in GB
memory 2 GB

# Memory for numpy in GB
numpy_memory = 2

# Number of orbitals below the HOMO to compute
num_orbs = 5

molecule mol {
O
H 1 1.1
H 1 1.1 2 104
symmetry c1
}


set {
basis 6-31G
scf_type pk
mp2_type conv
freeze_core false
e_convergence 1e-8
d_convergence 1e-8
}

### Start boilerplate
print '\nStarting RHF and integral build...'
t = time.time()

# First compute RHF energy using Psi4
energy('RHF')

# Grab data from wavfunction class 
wfn = wavefunction()
# Double occupied orbitals
ndocc = wfn.doccpi()[0]
# Number of molecular orbitals
nmo = wfn.nmo()
# SCF energy
SCF_E = wfn.energy()
# Orbital energies
eps = np.array(wfn.epsilon_a())

# Compute size of ERI tensor in GB
ERI_Size = (nmo**4)*8.0 / 1E9
print "Size of the ERI tensor will be %4.2f GB." % ERI_Size
memory_footprint = ERI_Size*2.5
if memory_footprint > numpy_memory:
    clean()
    raise Exception("Estimated memory utilization (%4.2f GB) exceeds numpy_memory limit of %4.2f GB." % (memory_footprint, numpy_memory))

t=time.time()
# Grab MO integral from NumpyHelper
nph = NumpyHelper()
MO = np.array(nph.mo_spin_eri())

print '\n..total time taken for RHF and integral transormation: %.3f seconds.' % (time.time()-t)
print 'Shape of spin orbital integrals: %s \n' % str(MO.shape)
### End boilerplate

# Update nocc and nvirt
nocc = ndocc * 2
nvirt = MO.shape[0] - nocc

# Build epsilon tensor
eps = np.repeat(eps, 2)
eocc = eps[:nocc]
evirt = eps[nocc:]

# Create occupied and virtual slices
o = slice(0, nocc)
v = slice(nocc, MO.shape[0])

if num_orbs > nocc:
    num_orbs = nocc

ep2_arr = []
for orbital in range(nocc-num_orbs*2, nocc, 2):
    E = eps[orbital]
    ep2_conv = False

    for ep_iter in range(50):
        Eold = E
    
        # Build energy denominators
        epsilon1 = 1/(E + eocc.reshape(-1, 1, 1) - evirt.reshape(-1, 1) - evirt)
        epsilon2 = 1/(E + evirt.reshape(-1, 1, 1) - eocc.reshape(-1, 1) - eocc)
    
        # Compute sigma's
        sigma1 = 0.5 * np.einsum('rsa,ars,ars', MO[v, v, orbital, o], MO[orbital, o, v, v], epsilon1)
        sigma2 = 0.5 * np.einsum('abr,rab,rab', MO[o, o, orbital, v], MO[orbital, v, o, o], epsilon2)
        Enew = eps[orbital] + sigma1 + sigma2

        # Break if below threshold
        if abs(Enew - Eold) < 1.e-4:
            ep2_conv = True
            ep2_arr.append(Enew * 27.21138505)
            break

        # Build derivatives    
        sigma_deriv1 = -1 * np.einsum('rsa,ars,ars', MO[v, v, orbital, o], MO[orbital, o, v, v], np.power(epsilon1, 2))
        sigma_deriv2 = -1 * np.einsum('abr,rab,rab', MO[o, o, orbital, v], MO[orbital, v, o, o], np.power(epsilon2, 2))
        deriv = 1 - (sigma_deriv1 + sigma_deriv2)
    
        # Newton-Raphson update
        E = Eold - (Eold - Enew) / deriv

    if ep2_conv is False:
        ep2_arr.append(Enew * 27.21138505)
        print 'WARNING: EP2 for orbital HOMO - %d did not converged' % (ndocc - orbital/2 - 1)


print "KP - Koopmans' Theorem"
print "EP2 - Electron Propagator 2\n"
print "HOMO - n         KP (eV)              EP2 (eV)"
print "----------------------------------------------"

KP_arr = eps[:nocc][::2] * 27.21138505

for orbital in range(0, len(ep2_arr)):
    print "% 4d     % 16.4f    % 16.4f" % ((len(ep2_arr)-orbital-1), KP_arr[orbital], ep2_arr[orbital])



