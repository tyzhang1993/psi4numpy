# A simple Psi 4 input script to compute MP3
# Requirements scipy 0.13.0+ and numpy 1.7.2+
#
# From Szabo and Ostlund page 390
#
# Created by: Daniel G. A. Smith
# Date: 7/29/14
# License: GPL v3.0
#

import time
import numpy as np
from scipy import linalg as SLA
np.set_printoptions(precision=5, linewidth=200, suppress=True)

# Memory for Psi4 in GB
memory 2 GB

# Memory for numpy in GB
numpy_memory = 2


molecule mol {
O
H 1 1.1
H 1 1.1 2 104
symmetry c1
}


set {
basis aug-cc-pVDZ
scf_type pk
guess core
mp2_type conv
freeze_core false
e_convergence 1e-8
d_convergence 1e-8
}

# First compute RHF energy using Psi4
print "\nStarting RHF and integral transformation..."
energy('RHF')

# Grab data from 
wfn = wavefunction()
# Coefficient Matrix
C = np.array(wfn.Ca())
# Double occupied orbitals
ndocc = wfn.doccpi()[0]
# Number of molecular orbitals
nmo = wfn.nmo()
# SCF energy
SCF_E = wfn.energy()
# Orbital energies
eps = wfn.epsilon_a()
eps = np.array([eps.get(x) for x in range(C.shape[0])])

# Compute size of ERI tensor in GB
ERI_Size = (nmo**4)*8.0 / 1E9
print "Size of the ERI tensor will be %4.2f GB." % ERI_Size
memory_footprint = ERI_Size*2.5
if memory_footprint > numpy_memory:
    clean()
    raise Exception("Estimated memory utilization (%4.2f GB) exceeds numpy_memory limit of %4.2f GB." % (memory_footprint, numpy_memory))
t=time.time()

# Grab OVOV MO integral from NumpyHelper
nph = NumpyHelper()
MO = np.array(nph.mo_eri())
# (pq|rs) -> <ps|rq>
MO = MO.swapaxes(1, 2)

print '\n..total time taken for RHF and integral transormation: %.3f seconds.' % (time.time()-t)
print 'Shape of MO integrals: %s \n' % str(MO.shape)

# Build epsilon tensor
eocc = eps[:ndocc]
evirt = eps[ndocc:]
epsilon = 1/(eocc.reshape(-1, 1, 1, 1) + eocc.reshape(-1, 1, 1) - evirt.reshape(-1, 1) - evirt)

# Build o and v slices
o = slice(0, ndocc)
v = slice(ndocc, MO.shape[0])

### MP2 correlation energy

MP2corr_E = 2 * np.einsum('abrs,rsab,abrs', MO[o, o, v, v], MO[v, v, o, o], epsilon)
MP2corr_E -= np.einsum('abrs,rsba,abrs', MO[o, o, v, v], MO[v, v, o, o], epsilon)
MP2total_E = SCF_E + MP2corr_E
print 'MP2 correlation energy:   %16.8f' % MP2corr_E
print 'MP2 total energy:         %16.8f' % MP2total_E
compare_values(energy('MP2'), MP2total_E, 6, 'MP2 Energy')

print '\nStarting MP3 energy...'
t = time.time()

# Equation 1
MP3corr_E =   2.0 * np.einsum('abru,ruts,tsab,abru,abts', MO[o, o, v, v], MO[v, v, v, v], MO[v, v, o, o], epsilon, epsilon) 
# Equation 2
MP3corr_E +=  2.0 * np.einsum('adrs,cbad,rscb,adrs,cbrs', MO[o, o, v, v], MO[o, o, o, o], MO[v, v, o, o], epsilon, epsilon)
# Equation 3
MP3corr_E += -4.0 * np.einsum('acrt,rbsc,stab,acrt,abst', MO[o, o, v, v], MO[v, o, v, o], MO[v, v, o, o], epsilon, epsilon)
# Equation 4
MP3corr_E += -4.0 * np.einsum('bcrt,rasb,stac,bcrt,acst', MO[o, o, v, v], MO[v, o, v, o], MO[v, v, o, o], epsilon, epsilon)
# Equation 5
MP3corr_E +=  8.0 * np.einsum('acrt,btsc,rsab,acrt,abrs', MO[o, o, v, v], MO[o, v, v, o], MO[v, v, o, o], epsilon, epsilon)
# Equation 6
MP3corr_E +=  2.0 * np.einsum('cbrt,atsc,rsab,cbrt,abrs', MO[o, o, v, v], MO[o, v, v, o], MO[v, v, o, o], epsilon, epsilon)
# Equation 7
MP3corr_E += -1.0 * np.einsum('acrs,dbac,srdb,acrs,dbrs', MO[o, o, v, v], MO[o, o, o, o], MO[v, v, o, o], epsilon, epsilon)
# Equation 8
MP3corr_E += -1.0 * np.einsum('abrt,trus,usab,abtr,abus', MO[o, o, v, v], MO[v, v, v, v], MO[v, v, o, o], epsilon, epsilon)
# Equation 9
MP3corr_E +=  2.0 * np.einsum('bcrt,arbs,tsac,cbrt,acst', MO[o, o, v, v], MO[o, v, o, v], MO[v, v, o, o], epsilon, epsilon)
# Equation 10
MP3corr_E +=  2.0 * np.einsum('cbrt,rasb,stac,cbrt,acst', MO[o, o, v, v], MO[v, o, v, o], MO[v, v, o, o], epsilon, epsilon)
# Equation 11
MP3corr_E += -4.0 * np.einsum('abrs,scat,rtbc,abrs,cbrt', MO[o, o, v, v], MO[v, o, o, v], MO[v, v, o, o], epsilon, epsilon)
# Equation 12
MP3corr_E += -4.0 * np.einsum('bcrt,atsc,rsab,bctr,abrs', MO[o, o, v, v], MO[o, v, v, o], MO[v, v, o, o], epsilon, epsilon)

print '...took %.3f seconds to compute MP3 correlation energy.\n' % (time.time()-t)

print 'Third order contribution: %16.8f' % MP3corr_E
MP3corr_E += MP2corr_E
MP3total_E = SCF_E + MP3corr_E
print 'MP3 correlation energy:   %16.8f' % MP3corr_E
print 'MP3 total energy:         %16.8f' % MP3total_E
compare_values(energy('MP3'), MP3total_E, 6, 'MP3 Energy')


